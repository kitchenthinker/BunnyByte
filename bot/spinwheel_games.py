from enum import Enum

import discord
from discord.app_commands import Choice
from typing import List
from discord.ui import Button, View
from discord import Embed, Guild, ButtonStyle, Interaction


# region SPINWHEEL
class SpinWheelGameStatus(Enum):
    InList = 0
    InProgress = 1
    InFinishedList = 2
    InWaitingList = 3
    InBanList = 4
    InListStream = 5


game_status_dict = {
    SpinWheelGameStatus.InList: {
        "name": "–í –†—É–ª–µ—Ç–∫–µ.",
        "value": SpinWheelGameStatus.InList.value,
        "emoji": "üé°",
        "description": "–°–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤–æ—à–µ–¥—à–∏—Ö –≤ —Ä—É–ª–µ—Ç–∫—É.",
        "show_pl": False},
    SpinWheelGameStatus.InListStream: {
        "name": "1. –í –†—É–ª–µ—Ç–∫–µ (–°—Ç—Ä–∏–º—ã).",
        "value": SpinWheelGameStatus.InListStream.value,
        "emoji": "üåä",
        "description": "–°–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤–æ—à–µ–¥—à–∏—Ö –≤ —Ä—É–ª–µ—Ç–∫—É (—Å—Ç—Ä–∏–º—ã).",
        "show_pl": False},
    SpinWheelGameStatus.InProgress: {
        "name": "–ü—Ä–æ—Ö–æ–¥–∏–º.",
        "value": SpinWheelGameStatus.InProgress.value,
        "emoji": "üéÆ",
        "description": "–°–ø–∏—Å–æ–∫ –∏–≥—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.",
        "show_pl": True},
    SpinWheelGameStatus.InFinishedList: {
        "name": "–ó–∞–∫–æ–Ω—á–∏–ª–∏.",
        "value": SpinWheelGameStatus.InFinishedList.value,
        "emoji": "‚úÖ",
        "description": "–°–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä.",
        "show_pl": True},
    SpinWheelGameStatus.InWaitingList: {
        "name": "–ñ–¥–µ–º.",
        "value": SpinWheelGameStatus.InWaitingList.value,
        "emoji": "üòó",
        "description": "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –Ω–æ –µ—â—ë –Ω–µ –≤—ã—à–µ–¥—à–∏—Ö –∏–≥—Ä.",
        "show_pl": False},
    SpinWheelGameStatus.InBanList: {
        "name": "–ë–∞–Ω—è.",
        "value": SpinWheelGameStatus.InBanList.value, "emoji": "ü•µ",
        "description": "–ò–≥—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ–∞–±–∏–ª–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–º–∏ —É–≥–æ–≤–æ—Ä–∞–º–∏. "
                       "–ï—Å–ª–∏ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –±—É–¥–µ—Ç–µ –ø—ã—Ç–∞—Ç—å –£–†–ê–ó–ê–ô–ö–£, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —Å–¥–∞—Å—Ç—Å—è. –ê, –≤–æ–∑–º–æ–∂–Ω–æ, –∏ –Ω–µ—Ç. üòù "
                       "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –¥–∞–∂–µ —Ä–∞–∑–æ–∑–ª–∏—Ç—Å—è, –Ω–æ, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è ¬∫–∫—Ç–æ –Ω–µ —Ä–∏—Å–∫—É–µ—Ç¬∫... –£–¥–∞—á–∏, –∑–∞–π–∫–∞!",
        "show_pl": False},
}
game_status_choices = [
    Choice(name=f"{x['emoji']} {x['name']}", value=x['value'])
    for x in game_status_dict.values()
]


class SpinWheelGameStatusEdit(Enum):
    InList = 0
    InProgress = 1
    InFinishedList = 2
    InWaitingList = 3
    InBanList = 4
    InListStream = 5
    Previous = 6


class SpinWheelAction(Enum):
    Add = 0,
    Edit = 1,
    Delete = 2


class Paginator:
    slice_number = 6

    def __init__(self, guild: Guild, game_list_: List, info: dict,
                 defer_: bool = True, admin_call: bool = False, table_view: bool = False):

        self.guild = guild
        self.game_list = game_list_
        self.info = info
        self.defer = defer_
        self.is_admin = admin_call
        self.table_view = table_view

        self.emb_list: List[Embed] = []
        self.index = 0
        self.max_index = len(self.game_list) - 1
        self.pages_count = 1
        self.current_emb: Embed | None = None
        self.view: CustomView | None = None
        self.generate_embeds()

    def add_align_field(self, embed: Embed):
        if self.table_view:
            if len(embed.fields) > 3:
                while len(embed.fields) % 3 != 0:
                    embed.add_field(name=f"#", value=f"#", inline=True)

    def generate_embeds(self):

        def add_field_to_emb(emb_group: Embed, game):
            value_ = "\u200b"
            if self.info['show_pl']:
                value_ = f"üì∫ [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({game['url']})" if game['url'] is not None else "üì∫ –ü–æ–∫–∞ –ø—É—Å—Ç–æ"
            if self.is_admin:
                value_ += f"\nüí¨:{game['comment']}"
            emb_group.add_field(name=f"üïπÔ∏è {game['game']}", value=f"{value_}\n\n", inline=bool(self.table_view))

        pages_count = (len(self.game_list) // Paginator.slice_number)
        self.pages_count = pages_count + 1 if (len(self.game_list) % Paginator.slice_number) != 0 else pages_count

        game_slices = [self.game_list[i:i + Paginator.slice_number]
                       for i in range(0, self.max_index + 1, Paginator.slice_number)]

        for game_slice in game_slices:
            embed = Embed(title=f"{self.info['emoji']} {self.info['name']}",
                          description=self.info['description'])
            embed.set_footer(text=f"Page {self.index + 1}/{self.pages_count}")

            for game_ in game_slice:
                add_field_to_emb(embed, game_)
            if self.table_view:
                self.add_align_field(embed)
            self.emb_list.append(embed)
        self.view = CustomView(_paginator=self, defer=self.defer)
        if len(self.game_list) <= Paginator.slice_number:
            self.view.clear_items()
        self.set_current_emb()

    def set_current_emb(self):
        self.current_emb = self.emb_list[self.index]

    def index_reach_edge(self):
        if any([self.index < 0, self.index > self.pages_count - 1]):
            self.index = 0

    def next(self):
        return self.get_current_item(step=1)

    def prev(self):
        return self.get_current_item(step=-1)

    def get_current_item(self, step: int = 0):
        self.index += step
        self.index_reach_edge()
        self.set_current_emb()
        self.current_emb.set_footer(text=f"Page {self.index + 1}/{self.pages_count}")
        return self.emb_list[self.index]

    # When the confirm button is pressed, set the inner value to `True` and
    # stop the View from listening to more input.
    # We also send the user an ephemeral message that we're confirming their choice.


class CustomView(View):

    def __init__(self, _paginator: Paginator, defer: bool = True):
        super().__init__()
        self.value = "\u200b"
        self.defer = defer
        self.paginator: Paginator = _paginator

    @discord.ui.button(label='Page', style=ButtonStyle.red, emoji='‚èÆ')
    async def page_previous(self, interaction: Interaction, button: Button):
        await interaction.response.defer(ephemeral=self.defer)
        await interaction.edit_original_response(embed=self.paginator.prev())  # ephemeral=True)
        # self.value = False
        # self.stop()

    # This one is similar to the confirmation button except sets the inner value to `False`
    @discord.ui.button(label='Page', style=ButtonStyle.green, emoji='‚è≠')
    async def page_next(self, interaction: Interaction, button: Button):
        await interaction.response.defer(ephemeral=self.defer)
        await interaction.edit_original_response(embed=self.paginator.next())  # ephemeral=True)
        # self.value = False
        # self.stop()


# endregion

SPINWHEEL_RULES = '–ü—Ä–∞–≤–∏–ª–∞ —Ä—É–ª–µ—Ç–∫–∏\n' \
                  '1. –†—É–ª–µ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤—Å—è–∫–∏–π —Ä–∞–∑, –∫–∞–∫ –Ω–∞ YouTube –±—É–¥–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –æ—á–µ—Ä–µ–¥–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.\n' \
                  '2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ #üôè–ø—Ä–æ–π–¥–∏-–∫–∞üôè\n' \
                  '3. –£–†–ê–ó–ê–ô–ö–ê –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É.\n' \
                  '4. –£–†–ê–ó–ê–ô–ö–ê –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª.\n' \
                  '5. –£–†–ê–ó–ê–ô–ö–ê –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä—ã –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏.\n' \
                  '6. –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ —Ä—É–ª–µ—Ç–∫—É, —Å–∫–æ—Ä–æ –æ–Ω–∞ –≤ –Ω–µ—ë –ø–æ–ø–∞–¥—ë—Ç. –õ–∏–±–æ –æ–Ω–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –ø–æ–ø–∞–≤—à–∏—Ö –≤ —Ä—É–ª–µ—Ç–∫—É –∏–≥—Ä.\n' \
                  '7. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è 2 - 3 –∏–≥—Ä—ã.\n' \
                  '8. –ü—Ä–∞–≤–∏–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.'
